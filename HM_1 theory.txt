1.	Что такое тестирование? 
Это процесс анализа программного средства и сопутствующей документации с целью выявления дефектов и повышения качества продукта. 
 
2.	Что такое QA, QC, Testing?
Testing (Тестирование) – самый первый уровень, проверка создаваемого программного продукта на соответствие требованиям к этому продукту. Это работа, которая может помочь исправить дефекты в уже созданном программном обеспечении. Основная задача тестирования – выявить и зафиксировать дефекты.
QC (Quality Control, контроль качества) – второй уровень, включающий в себя тестирование, но не ограничивающийся им. Quality Control обеспечивает  соответствие заранее согласованному уровню качества продукта и готовность к выпуску продукта. Основная задача контроля качества – предоставить объективную картину того, что происходит с качеством продукта на разных этапах разработки.
QA (Quality Assurance, обеспечение качества) – третий уровень, который включает в себя мероприятия на всех этапах разработки продукта для обеспечения согласованного уровня качества продукта. Основная задача  обеспечения качества – это выстроить систему, которая будет превентивно работать на качество продукта, чтобы при тестировании количество дефектов было минимальным.
QA – выше уровня, участвует на всех стадиях разработки. 

3.	Что такое качество? 
Качество — совокупность свойств и характеристик продукции или услуги, которые придают им способность удовлетворять обусловленные или предполагаемые потребности потребителя.

4.	Что такое качество ПО?
Качество ПО – комплекс характеристик программного продукта, определяющих способность выполнять возложенные на него функции.

5.	Когда надо начинать тестирование?
При сборе требований. Чем раньше в жизненном цикле программы начнется тестирование, тем в большей степени мы можем быть уверены в ее качестве.

6.	Когда надо заканчивать тестирование? (По эвристики окончание тестирование)
1) Когда время, отведенное на тестирование, истекает.
2) Когда видим первую достаточно серьезную проблему.
3) В программе слишком много ошибок, чтобы проводить дальнейшее тестирование. Вещи будут настолько изменены, что любое дальнейшее тестирование будет признано недействительным из-за изменений.
4) Когда ответили на все вопросы, на которые намеревались ответить.
5) Клиент отказался от проекта.
6) Когда имеется ошибка блокировки, из-за которой нельзя добраться до той области продукта, которую хотим протестировать, нет опыта в команде, чтобы провести какой-то специализированный тест.

7.	Зачем тестировщику платят деньги?  
За решение проблемы компании, чем можно раньше нахождение ошибок. За денежный результат работы. 

8.	Что такое дефект, баг, ошибка?
Баг – отклонение фактического результата от ожидаемого. 
Дефект – это ошибка, обнаруженная после запуска приложения в производства. Т.е., это отклонение от требований заказчика.
Ошибка – это результат ошибки кодирования. Ошибка, обнаруженная в среде разработки до отправки продукта заказчику. 
 
9.	Баг репорт -  документ, содержащий информацию о найденном баге.
 
10.	Структура баг репорта (основные пункты и все – полная стр-ра):
•	короткое описание (Bug Summary), -основной
•	серьезность (Severity), -основной
•	шаги к воспроизведению (Steps to reproduce),-основной 
•	результат (Actual Result), ожидаемый результат (Expected Result).-основной
•	Уникальный ID (unique ID)  
•	Идея
•	Подготовительная часть (SETUP and ADDITIONAL INFO)
•	История редактирования (Revision History – ведем журнал изменений тест-кейса (кто? Что? Зачем? Когда? Почему?)

11.	Какие уровни тестирования есть?  
•	Модульное тестирование, иногда еще называется компонентное тестирование:
модуль это наименьшая функциональная часть программы или приложения, которая не может функционировать отдельно а только лишь в сочетании с другими модулями. Тем не мение после разработки этого модуля мы уже можем приступить к тестированию и найти несоответсвия с нашими требованиями. Модульное тестирование заключается в тестировании этого отдельного модуля, как части программы, подразумевая что это только модуль и он не может существовать самостоятельно и являтся частью приложения, программы.
•	Интеграционное тестирование:
следующий уровень тестирования, который проводится после Модульного тестирования. После того как отдельные модули нашего приложения были протестированы, нам следует провести Интеграционное Тестирование, чтобы убедиться что наши модули успешно функционируют в связке друг с другом. Иными словами тестируем 2 и более связанных модуля, с тем чтобы проверить что интергация прошла успешно и без явных багов.
•	Системное тестирование
уровень тестирования в котором мы проводим тестирование целой системы или приложения, которое было полностью разработано и которое уже готово к потенциальному релизу. На этом уровне мы тестируем систему, приложение в целом, проводим тестирования на всех требуемых браузерах или операционных системах (если десктоп приложение) и проводим все требуемые типы тестирования такие как: функциональное, тестирование безопасности, тестирование юзабилити, тестирование производительности, нагрузочное тестирование и т.д.
•	Приемочное тестирование
после успешного завершения Системного Тестирования, продукт проходит уровень Приемочного Тестирования, который обычно проводится заказчиком или любыми другими заинтерисованными лицами, с целью убеждения что продукт выглядит и работает так как требовалось изначально и было описано в требованиях к продукту. Приемочное Тестирование также может проводиться после каждого из вышеописаных уровней тестирования.
•	Регрессионное тестирование
Это проверка того, что изменения, сделанные в ПО (для того, чтобы мир увидел новые фича), не поломали старые фича. 
